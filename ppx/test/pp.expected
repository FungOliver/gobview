module type Foo  =
  sig
    val makeProps :
      ?title:string ->
        ?defaultTitle:string ->
          ?meta:metaField array ->
            ?htmlAttributes:htmlAttribute array ->
              children:React.element ->
                ?key:string ->
                  unit ->
                    <
                      title: string Js_of_ocaml.Js.readonly_prop  ;defaultTitle: 
                                                                    string
                                                                    Js_of_ocaml.Js.readonly_prop
                                                                     ;
                      meta: metaField array Js_of_ocaml.Js.readonly_prop  ;
                      htmlAttributes: htmlAttribute array
                                        Js_of_ocaml.Js.readonly_prop  ;
                      children: React.element Js_of_ocaml.Js.readonly_prop  
                      >  Js_of_ocaml.Js.t
    val make :
      (<
         title: string Js_of_ocaml.Js.readonly_prop  ;defaultTitle: string
                                                                    Js_of_ocaml.Js.readonly_prop
                                                         ;meta: metaField
                                                                  array
                                                                  Js_of_ocaml.Js.readonly_prop
                                                             ;htmlAttributes: 
                                                                htmlAttribute
                                                                  array
                                                                  Js_of_ocaml.Js.readonly_prop
                                                                 ;children: 
                                                                    React.element
                                                                    Js_of_ocaml.Js.readonly_prop
                                                                      > 
         Js_of_ocaml.Js.t,
        React.element) React.componentLike
  end
let makeProps
  : ?name:'name ->
      ?key:string ->
        unit ->
          < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
            Js_of_ocaml.Js.t
  =
  fun ?name ->
    fun ?key ->
      fun _ ->
        let open Js_of_ocaml.Js.Unsafe in
          obj
            ((([|(Option.map
                    (fun _ ->
                       ("key",
                         (inject
                            ((Option.map Js_of_ocaml.Js.string key) |>
                               Js_of_ocaml.Js.Opt.option)))) key);(Option.map
                                                                    (fun _ ->
                                                                    ("name",
                                                                    (inject
                                                                    name)))
                                                                    name)|]
                 |> Array.to_list)
                |> (List.filter_map (fun x -> x)))
               |> Array.of_list)
let make =
  let Test
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    let name =
      match fun (type res) -> fun (type t2) ->
              fun (t2 : t2 Js_of_ocaml.Js.t) ->
                fun (_ : t2 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                  -> (Js_of_ocaml.Js.Unsafe.get t2 "name" : res)
              (Props : < .. >  Js_of_ocaml.Js.t)
              (fun ((x)[@merlin.loc ]) -> ((x#name)[@merlin.loc ]))
      with
      | ((Some (name))[@explicit_arity ]) -> name
      | None -> "" in
    React.createFragment
      [ReactDOM.createDOMElementVariadic "div" ~props:(ReactDOM.domProps ())
         [React.string ("Hello " ^ name)];
      React.createElement Hello.make
        (Hello.makeProps ~one:"1" ~children:(React.string ("Hello " ^ name))
           ())] in
  let _ =
    Js_of_ocaml.Js.Unsafe.set Test "displayName"
      (Js_of_ocaml.Js.string "Test") in
  Test
let makeProps
  : a:'a ->
      b:'b ->
        ?key:string ->
          unit ->
            <
              a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                        Js_of_ocaml.Js.readonly_prop
                                                       > 
              Js_of_ocaml.Js.t
  =
  fun ~a ->
    fun ~b ->
      fun ?key ->
        fun _ ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              ((([|(Option.map
                      (fun _ ->
                         ("key",
                           (inject
                              ((Option.map Js_of_ocaml.Js.string key) |>
                                 Js_of_ocaml.Js.Opt.option)))) key);((
                   Some (("b", (inject b))))
                   [@explicit_arity ]);((Some (("a", (inject a))))
                   [@explicit_arity ])|] |> Array.to_list)
                  |> (List.filter_map (fun x -> x)))
                 |> Array.of_list)
let make =
  let Test
    (Props :
      <
        a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                  Js_of_ocaml.Js.readonly_prop
                                                 > 
        Js_of_ocaml.Js.t)
    =
    let a =
      fun (type res) -> fun (type t1) ->
        fun (t1 : t1 Js_of_ocaml.Js.t) ->
          fun (_ : t1 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
            (Js_of_ocaml.Js.Unsafe.get t1 "a" : res)
        (Props : < .. >  Js_of_ocaml.Js.t)
        (fun ((x)[@merlin.loc ]) -> ((x#a)[@merlin.loc ])) in
    let b =
      fun (type res) -> fun (type t0) ->
        fun (t0 : t0 Js_of_ocaml.Js.t) ->
          fun (_ : t0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
            (Js_of_ocaml.Js.Unsafe.get t0 "b" : res)
        (Props : < .. >  Js_of_ocaml.Js.t)
        (fun ((x)[@merlin.loc ]) -> ((x#b)[@merlin.loc ])) in
    print_endline "This function should be named `Test`";
    ReactDOM.createDOMElementVariadic "div" ~props:(ReactDOM.domProps ()) [] in
  let _ =
    Js_of_ocaml.Js.Unsafe.set Test "displayName"
      (Js_of_ocaml.Js.string "Test") in
  Test
module External =
  struct
    let componentProps
      : a:int ->
          b:string ->
            ?key:string ->
              unit ->
                <
                  a: int Js_of_ocaml.Js.readonly_prop  ;b: string
                                                             Js_of_ocaml.Js.readonly_prop
                                                            > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun _ ->
                             ("key",
                               (inject
                                  ((Option.map Js_of_ocaml.Js.string key) |>
                                     Js_of_ocaml.Js.Opt.option)))) key);((
                       Some (("b", (inject b))))
                       [@explicit_arity ]);((Some (("a", (inject a))))
                       [@explicit_arity ])|] |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    external component :
      (<
         a: int Js_of_ocaml.Js.readonly_prop  ;b: string
                                                    Js_of_ocaml.Js.readonly_prop
                                                   > 
         Js_of_ocaml.Js.t,
        React.element) React.componentLike = ""[@@otherAttribute "bla"]
  end
module Bar =
  struct
    let makeProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun _ ->
                             ("key",
                               (inject
                                  ((Option.map Js_of_ocaml.Js.string key) |>
                                     Js_of_ocaml.Js.Opt.option)))) key);((
                       Some (("b", (inject b))))
                       [@explicit_arity ]);((Some (("a", (inject a))))
                       [@explicit_arity ])|] |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    let make =
      let Test$Bar
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        let a =
          fun (type res) -> fun (type t6) ->
            fun (t6 : t6 Js_of_ocaml.Js.t) ->
              fun (_ : t6 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t6 "a" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#a)[@merlin.loc ])) in
        let b =
          fun (type res) -> fun (type t5) ->
            fun (t5 : t5 Js_of_ocaml.Js.t) ->
              fun (_ : t5 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t5 "b" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#b)[@merlin.loc ])) in
        print_endline "This function should be named `Test$Bar`";
        ReactDOM.createDOMElementVariadic "div" ~props:(ReactDOM.domProps ())
          [] in
      let _ =
        Js_of_ocaml.Js.Unsafe.set Test$Bar "displayName"
          (Js_of_ocaml.Js.string "Test$Bar") in
      Test$Bar
    let componentProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun _ ->
                             ("key",
                               (inject
                                  ((Option.map Js_of_ocaml.Js.string key) |>
                                     Js_of_ocaml.Js.Opt.option)))) key);((
                       Some (("b", (inject b))))
                       [@explicit_arity ]);((Some (("a", (inject a))))
                       [@explicit_arity ])|] |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    let component =
      let Test$Bar$component
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        let a =
          fun (type res) -> fun (type t4) ->
            fun (t4 : t4 Js_of_ocaml.Js.t) ->
              fun (_ : t4 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t4 "a" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#a)[@merlin.loc ])) in
        let b =
          fun (type res) -> fun (type t3) ->
            fun (t3 : t3 Js_of_ocaml.Js.t) ->
              fun (_ : t3 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t3 "b" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#b)[@merlin.loc ])) in
        print_endline "This function should be named `Test$Bar$component`";
        ReactDOM.createDOMElementVariadic "div" ~props:(ReactDOM.domProps ())
          [] in
      let _ =
        Js_of_ocaml.Js.Unsafe.set Test$Bar$component "displayName"
          (Js_of_ocaml.Js.string "Test$Bar$component") in
      Test$Bar$component
  end
module type X_int  = sig val x : int end
module Func(M:X_int) =
  struct
    let x = M.x + 1
    let makeProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun _ ->
                             ("key",
                               (inject
                                  ((Option.map Js_of_ocaml.Js.string key) |>
                                     Js_of_ocaml.Js.Opt.option)))) key);((
                       Some (("b", (inject b))))
                       [@explicit_arity ]);((Some (("a", (inject a))))
                       [@explicit_arity ])|] |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    let make =
      let Test$Func
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        let a =
          fun (type res) -> fun (type t8) ->
            fun (t8 : t8 Js_of_ocaml.Js.t) ->
              fun (_ : t8 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t8 "a" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#a)[@merlin.loc ])) in
        let b =
          fun (type res) -> fun (type t7) ->
            fun (t7 : t7 Js_of_ocaml.Js.t) ->
              fun (_ : t7 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t7 "b" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#b)[@merlin.loc ])) in
        print_endline "This function should be named `Test$Func`" M.x;
        ReactDOM.createDOMElementVariadic "div" ~props:(ReactDOM.domProps ())
          [] in
      let _ =
        Js_of_ocaml.Js.Unsafe.set Test$Func "displayName"
          (Js_of_ocaml.Js.string "Test$Func") in
      Test$Func
  end
module ForwardRef =
  struct
    let makeProps
      : ?key:string -> ?ref:ReactDOM.domRef -> unit -> <  >  Js_of_ocaml.Js.t
      =
      fun ?key ->
        fun ?ref ->
          fun _ ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                ((([|(Option.map (fun _ -> ("ref", (inject ref))) ref);(
                     Option.map
                       (fun _ ->
                          ("key",
                            (inject
                               ((Option.map Js_of_ocaml.Js.string key) |>
                                  Js_of_ocaml.Js.Opt.option)))) key)|]
                     |> Array.to_list)
                    |> (List.filter_map (fun x -> x)))
                   |> Array.of_list)
    let make =
      React.forwardRef
        (let Test$ForwardRef (Props : <  >  Js_of_ocaml.Js.t) theRef =
           ReactDOM.createDOMElementVariadic "div"
             ~props:(ReactDOM.domProps ~ref:theRef ())
             ["ForwardRef" |. React.string] in
         let _ =
           Js_of_ocaml.Js.Unsafe.set Test$ForwardRef "displayName"
             (Js_of_ocaml.Js.string "Test$ForwardRef") in
         Test$ForwardRef)
  end
let fragment foo = ((React.createFragment (([foo])[@bla ]))[@bla ])
let polyChildrenFragment foo bar = React.createFragment [foo; bar]
let nestedFragment foo bar baz =
  React.createFragment [foo; React.createFragment [bar; baz]]
let upper = React.createElement Upper.make (Upper.makeProps ())
let upperWithChild foo =
  React.createElement Upper.make (Upper.makeProps ~children:foo ())
let upperWithChildren foo bar =
  React.createElementVariadic Upper.make
    (Upper.makeProps ~children:React.null ()) [foo; bar]
let lower =
  ReactDOM.createDOMElementVariadic "lower" ~props:(ReactDOM.domProps ()) []
let lowerWithChildAndProps foo =
  ReactDOM.createDOMElementVariadic "lower"
    ~props:(ReactDOM.domProps ~a:1 ~b:"1" ()) [foo]
let lowerWithChildren foo bar =
  ReactDOM.createDOMElementVariadic "lower" ~props:(ReactDOM.domProps ())
    [foo; bar]
let nestedElement =
  React.createElement Foo.Bar.make (Foo.Bar.makeProps ~a:1 ~b:"1" ())
let nestedElementCustomName =
  React.createElement Foo.component (Foo.componentProps ~a:1 ~b:"1" ())
