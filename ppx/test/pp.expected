let makeProps
  : ?name:'name ->
      ?key:string ->
        unit ->
          < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
            Js_of_ocaml.Js.t
  =
  fun ?name ->
    fun ?key ->
      fun _ ->
        let open Js_of_ocaml.Js.Unsafe in
          obj [|("key", (inject key));("name", (inject name))|]
let make =
  let Test
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    let name =
      match fun (type res) -> fun (type t2) ->
              fun (t2 : t2 Js_of_ocaml.Js.t) ->
                fun (_ : t2 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                  -> (Js_of_ocaml.Js.Unsafe.get t2 "name" : res)
              (Props : < .. >  Js_of_ocaml.Js.t)
              (fun ((x)[@merlin.loc ]) -> ((x#name)[@merlin.loc ]))
      with
      | Some name -> name
      | None -> "" in
    ReactDOM.createFragment
      [|(ReactDOM.createDOMElementVariadic "div"
           [|(React.string ("Hello " ^ name))|]);(React.createElement
                                                    Hello.make
                                                    (Hello.makeProps ~one:"1"
                                                       ~children:(React.string
                                                                    (
                                                                    "Hello "
                                                                    ^ name))
                                                       ()))|] in
  Test
let makeProps
  : a:'a ->
      b:'b ->
        ?key:string ->
          unit ->
            <
              a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                        Js_of_ocaml.Js.readonly_prop
                                                       > 
              Js_of_ocaml.Js.t
  =
  fun ~a ->
    fun ~b ->
      fun ?key ->
        fun _ ->
          let open Js_of_ocaml.Js.Unsafe in
            obj [|("key", (inject key));("b", (inject b));("a", (inject a))|]
let make =
  let Test
    (Props :
      <
        a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                  Js_of_ocaml.Js.readonly_prop
                                                 > 
        Js_of_ocaml.Js.t)
    =
    let a =
      fun (type res) -> fun (type t1) ->
        fun (t1 : t1 Js_of_ocaml.Js.t) ->
          fun (_ : t1 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
            (Js_of_ocaml.Js.Unsafe.get t1 "a" : res)
        (Props : < .. >  Js_of_ocaml.Js.t)
        (fun ((x)[@merlin.loc ]) -> ((x#a)[@merlin.loc ])) in
    let b =
      fun (type res) -> fun (type t0) ->
        fun (t0 : t0 Js_of_ocaml.Js.t) ->
          fun (_ : t0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
            (Js_of_ocaml.Js.Unsafe.get t0 "b" : res)
        (Props : < .. >  Js_of_ocaml.Js.t)
        (fun ((x)[@merlin.loc ]) -> ((x#b)[@merlin.loc ])) in
    Js.log "This function should be named `Test`";
    ReactDOM.createDOMElementVariadic "div" [||] in
  Test
module Bar =
  struct
    let makeProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("key", (inject key));("b", (inject b));("a", (inject a))|]
    let make =
      let Test$Bar
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        let a =
          fun (type res) -> fun (type t6) ->
            fun (t6 : t6 Js_of_ocaml.Js.t) ->
              fun (_ : t6 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t6 "a" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#a)[@merlin.loc ])) in
        let b =
          fun (type res) -> fun (type t5) ->
            fun (t5 : t5 Js_of_ocaml.Js.t) ->
              fun (_ : t5 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t5 "b" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#b)[@merlin.loc ])) in
        Js.log "This function should be named `Test$Bar`";
        ReactDOM.createDOMElementVariadic "div" [||] in
      Test$Bar
    let componentProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("key", (inject key));("b", (inject b));("a", (inject a))|]
    let component =
      let Test$Bar$component
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        let a =
          fun (type res) -> fun (type t4) ->
            fun (t4 : t4 Js_of_ocaml.Js.t) ->
              fun (_ : t4 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t4 "a" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#a)[@merlin.loc ])) in
        let b =
          fun (type res) -> fun (type t3) ->
            fun (t3 : t3 Js_of_ocaml.Js.t) ->
              fun (_ : t3 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t3 "b" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#b)[@merlin.loc ])) in
        Js.log "This function should be named `Test$Bar$component`";
        ReactDOM.createDOMElementVariadic "div" [||] in
      Test$Bar$component
  end
module type X_int  = sig val x : int end
module Func(M:X_int) =
  struct
    let x = M.x + 1
    let makeProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("key", (inject key));("b", (inject b));("a", (inject a))|]
    let make =
      let Test$Func
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        let a =
          fun (type res) -> fun (type t8) ->
            fun (t8 : t8 Js_of_ocaml.Js.t) ->
              fun (_ : t8 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t8 "a" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#a)[@merlin.loc ])) in
        let b =
          fun (type res) -> fun (type t7) ->
            fun (t7 : t7 Js_of_ocaml.Js.t) ->
              fun (_ : t7 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get t7 "b" : res)
            (Props : < .. >  Js_of_ocaml.Js.t)
            (fun ((x)[@merlin.loc ]) -> ((x#b)[@merlin.loc ])) in
        Js.log "This function should be named `Test$Func`" M.x;
        ReactDOM.createDOMElementVariadic "div" [||] in
      Test$Func
  end
module ForwardRef =
  struct
    let makeProps
      : ?key:string -> ?ref:ReactDOM.domRef -> unit -> <  >  Js_of_ocaml.Js.t
      =
      fun ?key ->
        fun ?ref ->
          fun _ ->
            let open Js_of_ocaml.Js.Unsafe in
              obj [|("ref", (inject ref));("key", (inject key))|]
    let make =
      React.forwardRef
        (let Test$ForwardRef (Props : <  >  Js_of_ocaml.Js.t) theRef =
           ReactDOM.createDOMElementVariadic "div"
             ~props:(ReactDOM.domProps ~ref:theRef ())
             [|("ForwardRef" |. React.string)|] in
         Test$ForwardRef)
  end
let fragment foo = ReactDOM.createFragment [|foo|]
